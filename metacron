#!/bin/bash

### metacron: check crontabs for multiple users/hosts
#
# Reads METACRON_USERHOSTS env variable (format 'user@host user@host ...')
# SSH's to each user/host and prints the crontab
# That's it
# 
# I recommend putting METACRON_USERHOSTS in your .bashrc so you don't have to worry about it
# Example: Which host did I put that job on?
#     $ metacron | grep nameOfScript
#     --- Checking cron for: userA@hostA ---
#     --- Checking cron for: userA@hostB ---
#     00 8 * * * /bin/nameOfScript
# Here we see that nameOfScript was found in the crontab for userA@hostB
###

# Bail if any statement returns non-zero
set -o errexit
# Bail if unset variable is accessed
set -o nounset
# Pipelines exit with rightmost non-zero exit code, or zero if fully successful
set -o pipefail

BOLD_BLUE="\e[1;34m"
COLOR_OFF="\e[0m"
BOLD_RED="\e[1;31m"

die() {
    echo -e "$@" >&2
    exit 1
}

if [[ -z "${METACRON_USERHOSTS-}" ]]; then
    die "Must set METACRON_USERHOSTS env variable. Format: 'user@host user@host ...' (space-delimited)"
fi

exit_code=0
# Split USERSHOSTS into an array
IFS=' ' read -ra userhostarray <<< "$METACRON_USERHOSTS"
for userhost in "${userhostarray[@]}"; do
    if [[ "$userhost" != *@* ]]; then
        die "Malformed user@host spec: '$userhost'"
    fi
    echo -e "${BOLD_BLUE}--- Checking cron for: $userhost ---${COLOR_OFF}" >&2
    if ! ssh "$userhost" crontab -l; then
        echo -e "${BOLD_RED}Failed to check crontab!${COLOR_OFF}" >&2
        exit_code=1
    fi
done

if [[ $exit_code != 0 ]]; then
    echo -e "${BOLD_RED}Failed to query one or more userhosts!${COLOR_OFF}" >&2
fi
exit "$exit_code"
